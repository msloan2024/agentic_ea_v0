<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EA with CMS integration</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="<%= '/css/styles.css' %>" />
  </head>
  <body>
    <div class="container">
      <div class="chat-container">
        <div class="chat-header">
          <div class="d-flex align-items-center">
            <div>
              <h4 class="mb-0">What are you working on?</h4>
              <small>Tell me about your project.</small>
            </div>
          </div>
        </div>
        <div class="chat-body" id="chatBody">
          <div class="typing-indicator" id="typingIndicator">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
          </div>
        </div>
        <div class="d-flex align-items-center mb-3">
          <button
            id="voiceIcon"
            class="btn btn-secondary"
            onclick="startHound()"
          >
            <img src="<%= '/imgs/mic.png' %>" alt="Microphone" height="40" />
          </button>
          <div id="stopButtonWrapper">
            <button
              id="stopButton"
              type="button"
              class="btn btn-danger"
              style="width: 70px"
            >
              Stop
            </button>
          </div>
          <div class="card" style="width: 100%">
            <div class="card-body" id="textbox">
              Click on the microphone to start.
            </div>
          </div>
        </div>
      </div>
    </div>

    <div style="display: none">
      <audio id="mp3Player" controls></audio>
    </div>
    <script src="<%= '/js/houndify.js' %>"></script>
    <script>
      const conversation = [];
      const user_messages = [];
      const textbox = document.getElementById("textbox");
      const voiceButton = document.getElementById("voiceIcon");
      const recorder = new Houndify.AudioRecorder();
      let voiceRequest = null;
      let formattedTranscription;
      let conversationState;
      const audioPlayer = document.getElementById("mp3Player");
      const stopButton = document.getElementById("stopButtonWrapper");

      recorder.on("start", () => {
        voiceRequest = initVoiceRequest(recorder.sampleRate);
      });

      recorder.on("data", (data) => {
        voiceRequest.write(data);
      });

      recorder.on("end", () => {
        voiceRequest.end();
      });

      recorder.on("error", (err) => {
        voiceRequest.abort();
      });

      function startHound() {
        textbox.innerHTML = "";
        if (recorder && recorder.isRecording()) {
          recorder.stop();
          return;
        }
        recorder.start();
      }

      function initVoiceRequest(sampleRate) {
        const voiceRequest = new Houndify.VoiceRequest({
          clientId: "<%= clientId %>",
          authURL: "/houndSTTAuth",
          requestInfo: {
            UserID: "msloan@soundhound.com",
            Latitude: 37.388309,
            Longitude: -121.973968,
          },
          conversationState: conversationState,
          sampleRate: sampleRate,
          enableVAD: true,
          onTranscriptionUpdate: (transcript) => {
            textbox.innerText = transcript.PartialTranscript;
            if (transcript.SafeToStopAudio == true) {
              handleUserMessage(transcript.PartialTranscript);
            }
          },

          onResponse: (response, info) => {
            recorder.stop();
            formattedTranscription =
              response.AllResults[0].FormattedTranscription;
            sendTranscription(formattedTranscription);
          },

          onError: (err, info) => {
            console.log(err);
          },
        });
        return voiceRequest;
      }

      function createMessageBubble(content, sender) {
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message", sender);

        const avatarDiv = document.createElement("div");
        avatarDiv.classList.add("avatar");

        if (sender === "user") {
          avatarDiv.textContent = "U";
        } else {
          avatarDiv.textContent = "S";
        }

        const contentDiv = document.createElement("div");
        contentDiv.classList.add("message-content");

        // Convert line breaks to <br> tags
        const formattedContent = content.replace(/\n/g, "<br>");
        contentDiv.innerHTML = formattedContent;

        if (sender === "user") {
          messageDiv.appendChild(avatarDiv);
          messageDiv.appendChild(contentDiv);
        } else {
          messageDiv.appendChild(contentDiv);
          messageDiv.appendChild(avatarDiv);
        }

        return messageDiv;
      }

      function showTypingIndicator() {
        const indicator = document.getElementById("typingIndicator");
        indicator.classList.add("visible");
      }

      function hideTypingIndicator() {
        const indicator = document.getElementById("typingIndicator");
        indicator.classList.remove("visible");
      }

      function addMessage(content, sender) {
        if (sender === "user") {
          conversation.push({ sender: "user", text: content });
          user_messages.push(content);
        } else {
          conversation.push({ sender: "system", text: content });
        }

        const chatBody = document.getElementById("chatBody");
        const messageEl = createMessageBubble(content, sender);

        chatBody.insertBefore(
          messageEl,
          document.getElementById("typingIndicator")
        );
        chatBody.scrollTop = chatBody.scrollHeight;
      }

      async function handleUserMessage(message) {
        textbox.innerHTML =
          "Click the microphone icon again to ask another question...";

        // Always put the first question in conversation array *as soon as the SafeToStopAudio flag is true*
        if (conversation.length === 0) {
          addMessage(message, "user");
        }
        // In case partial transcript changes AFTER SafeToStopAudio, don't add another message.
        else if (
          conversation[conversation.length - 1].text !== message &&
          conversation[conversation.length - 1].sender !== "user"
        ) {
          addMessage(message, "user");
        }

        showTypingIndicator();
      }

      function showStopButton() {
        stopButton.style.display = "block";
      }

      function hideStopButton() {
        stopButton.style.display = "none";
      }

      stopButton.addEventListener("click", () => {
        audioPlayer.pause();
        audioPlayer.currentTime = 0; // Reset to beginning
        hideStopButton();
      });

      audioPlayer.addEventListener("ended", () => {
        hideStopButton();
      });

      async function sendTranscription(formattedTranscription) {
        try {
          const response = await fetch("/agentChat", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              transcription: formattedTranscription,
              message_history: user_messages,
            }),
          });
          const data = await response.json();
          hideTypingIndicator();
          addMessage(data.message, "system");
          playAudio(data.audioUrl);
          cmsIntegration(formattedTranscription, data.message, user_messages);
          return data;
        } catch (error) {
          console.error("Error sending transcription:", error);
        }
        return;
      }

      function playAudio(audioURL) {
        audioPlayer.src = audioURL;
        audioPlayer.play();
        showStopButton();
      }

      async function cmsIntegration(query, response, history) {
        const url =
          "https://editor.wallboard.us/public-api/integration/webhooks?payload=eyJldmVudF9pZCI6IlB1c2hfRGF0YSIsImRhdGEiOiIifQ==&apiKey=eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1ZTFjYTI1ZjBjY2U0NTRjYmQzMWQyNTBkYWIxMTNlMSIsImlzcyI6IndhbGxib2FyZCIsImlhdCI6MTczMDIwMzI4OSwic2NvcGUiOiJ3ZWJob29rcyIsImN1c3RvbWVyX2lkIjoiNTc2In0.X8-9Q8npMCN3TVw5LSmZVSnmUFAv15uZqXCO6FYpEL8";
        const body = {
          event_id: "Push_Data",
          data: {
            Query: query,
            Response: response,
            previous_context: history,
          },
        };
        try {
          const response = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
          });
          if (!response.ok) throw new Error("Network response was not ok");
          const data = await response.json();
          console.log("Server response:", data);
        } catch (error) {
          console.error("Error sending post request:", error);
        }
      }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
