<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MetroClick Demo</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="<%= '/css/styles.css' %>" />
  </head>
  <body>
    <div class="container">
      <div class="chat-container">
        <div class="chat-header-diy">
          <div class="d-flex align-items-center">
            <div>
              <h4 class="mb-0">DIY Depot</h4>
              <small>Always here to help</small>
            </div>
          </div>
        </div>
        <div class="chat-body" id="chatBody">
          <div class="typing-indicator" id="typingIndicator">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
          </div>
        </div>
        <div class="d-flex align-items-center mb-3">
          <button
            id="voiceIcon"
            class="btn btn-secondary"
            onclick="startHound()"
          >
            <img src="<%= '/imgs/mic.png' %>" alt="Microphone" height="40" />
          </button>
          <div id="stopButtonWrapper">
            <button
              id="stopButton"
              type="button"
              class="btn btn-danger"
              style="width: 70px"
            >
              Stop
            </button>
          </div>
          <div class="card" style="width: 100%">
            <div class="card-body" id="textbox">
              Click on the microphone and wait for the beep.
            </div>
          </div>
        </div>
      </div>
    </div>

    <div style="display: none">
      <audio id="mp3Player" controls></audio>
    </div>
    <script src="<%= '/js/houndify.js' %>"></script>
    <script>
      class BeepGenerator {
        constructor() {
          this.audioContext = null;
          this.initAudioContext();
        }

        initAudioContext() {
          try {
            this.audioContext = new (window.AudioContext ||
              window.webkitAudioContext)();
          } catch (e) {
            console.error("Web Audio API not supported:", e);
          }
        }

        playBeep(frequency = 800, duration = 200, type = "sine") {
          if (!this.audioContext) return;

          // Resume audio context if suspended (required by some browsers)
          if (this.audioContext.state === "suspended") {
            this.audioContext.resume();
          }

          const oscillator = this.audioContext.createOscillator();
          const gainNode = this.audioContext.createGain();

          oscillator.connect(gainNode);
          gainNode.connect(this.audioContext.destination);

          oscillator.frequency.value = frequency;
          oscillator.type = type;

          // Create a smooth envelope to avoid clicks
          const now = this.audioContext.currentTime;
          gainNode.gain.setValueAtTime(0, now);
          gainNode.gain.linearRampToValueAtTime(0.8, now + 0.005);
          gainNode.gain.exponentialRampToValueAtTime(
            0.01,
            now + duration / 1000
          );

          oscillator.start(now);
          oscillator.stop(now + duration / 1000);
        }
      }

      const beepGenerator = new BeepGenerator();

      const conversation = [];
      const textbox = document.getElementById("textbox");
      const voiceButton = document.getElementById("voiceIcon");
      const recorder = new Houndify.AudioRecorder();
      let voiceRequest = null;
      let conversationState = null;
      const audioPlayer = document.getElementById("mp3Player");
      const stopButton = document.getElementById("stopButtonWrapper");

      recorder.on("start", () => {
        voiceRequest = initVoiceRequest(recorder.sampleRate);
        beepGenerator.playBeep(1200, 250, "square");
      });

      recorder.on("data", (data) => {
        voiceRequest.write(data);
      });

      recorder.on("end", () => {
        voiceRequest.end();
      });

      recorder.on("error", (err) => {
        voiceRequest.abort();
      });

      function startHound() {
        textbox.innerHTML = "";
        if (recorder && recorder.isRecording()) {
          recorder.stop();
          return;
        }
        recorder.start();
      }

      function initVoiceRequest(sampleRate) {
        const voiceRequest = new Houndify.VoiceRequest({
          clientId: "P92I5XLCtTafDREMvTl8Vw==",
          authURL: "/houndifyAuthMCdemo",
          requestInfo: {
            UserID: "msloan@soundhound.com",
            Latitude: 37.388309,
            Longitude: -121.973968,
            DeviceInfo: {
              env: "dev",
              DeviceName: "",
              DeviceYear: "",
              DeviceModel: "diydepot",
            },
            Polaris: {
              Model: "16k",
              PolarisOnly: true,
              EnglishMinProb: 0.2,
              RespLangMinProb: 0.8,
            },
            ResponseAudioVoice: "Emma Multilingual",
            ResponseAudioShortOrLong: "Short",
            ReturnResponseAudioAsURL: true,
          },
          conversationState: conversationState,
          sampleRate: sampleRate,
          enableVAD: true,
          onTranscriptionUpdate: (transcript) => {
            textbox.innerText = transcript.PartialTranscript;
            if (transcript.SafeToStopAudio == true) {
              handleUserMessage(transcript.PartialTranscript);
            }
          },

          onResponse: (response, info) => {
            recorder.stop();
            hideTypingIndicator();
            spokenResponse = response.AllResults[0].SpokenResponse;
            addMessage(spokenResponse, "system-diy");
            conversationState = response.AllResults[0].ConversationState;
            playAudio(response.AllResults[0].ResponseAudioURL);
          },

          onError: (err, info) => {
            console.log(err);
          },
        });
        return voiceRequest;
      }

      function createMessageBubble(content, sender) {
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message", sender);

        const avatarDiv = document.createElement("div");
        avatarDiv.classList.add("avatar");

        if (sender === "user-diy") {
          avatarDiv.textContent = "U";
        } else {
          avatarDiv.textContent = "S";
        }

        const contentDiv = document.createElement("div");
        contentDiv.classList.add("message-content");

        // Convert line breaks to <br> tags
        const formattedContent = content.replace(/\n/g, "<br>");
        contentDiv.innerHTML = formattedContent;

        if (sender === "user-diy") {
          messageDiv.appendChild(avatarDiv);
          messageDiv.appendChild(contentDiv);
        } else {
          messageDiv.appendChild(contentDiv);
          messageDiv.appendChild(avatarDiv);
        }

        return messageDiv;
      }

      function showTypingIndicator() {
        const indicator = document.getElementById("typingIndicator");
        indicator.classList.add("visible");
      }

      function hideTypingIndicator() {
        const indicator = document.getElementById("typingIndicator");
        indicator.classList.remove("visible");
      }

      function addMessage(content, sender) {
        if (sender === "user-diy") {
          conversation.push({ sender: "user", text: content });
        } else {
          conversation.push({ sender: "system", text: content });
        }

        const chatBody = document.getElementById("chatBody");
        const messageEl = createMessageBubble(content, sender);

        chatBody.insertBefore(
          messageEl,
          document.getElementById("typingIndicator")
        );
        chatBody.scrollTop = chatBody.scrollHeight;
      }

      // Function to handle user message submission and API call
      async function handleUserMessage(message) {
        textbox.innerHTML =
          "Click the microphone icon again to ask another question...";

        // Always put the first question in conversation array *as soon as the SafeToStopAudio flag is true*
        if (conversation.length === 0) {
          addMessage(message, "user-diy");
        }
        // In case partial transcript changes AFTER SafeToStopAudio, don't add another message.
        else if (
          conversation[conversation.length - 1].text !== message &&
          conversation[conversation.length - 1].sender !== "user-diy"
        ) {
          addMessage(message, "user-diy");
        }

        showTypingIndicator();
      }

      function playAudio(audioURL) {
        audioPlayer.src = audioURL;
        audioPlayer.play();
        showStopButton();
      }

      function showStopButton() {
        stopButton.style.display = "block";
      }

      function hideStopButton() {
        stopButton.style.display = "none";
      }

      stopButton.addEventListener("click", () => {
        audioPlayer.pause();
        audioPlayer.currentTime = 0; // Reset to beginning
        hideStopButton();
      });

      audioPlayer.addEventListener("ended", () => {
        hideStopButton();
      });

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }
    </script>
    <script>
      if ("customModule" in window && "infoChannel" in window.customModule) {
        const data = { keywords: <%- keywords %> };
        window.customModule
          .infoChannel(data)
          .then((resp) => {
            // message would be always `ok`. (might change later)
            console.log(resp);
          })
          .catch((err) => {
            console.error(err);
          });
      } else {
        console.log("API unavailable");
      }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
