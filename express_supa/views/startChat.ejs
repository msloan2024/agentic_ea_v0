<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EA with CMS integration</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="<%= '/css/styles.css' %>" />
  </head>
  <body>
    <div class="container">
      <div class="chat-container">
        <div class="chat-header">
          <div class="d-flex align-items-center">
            <div>
              <h4 class="mb-0"><%= chatbotName %></h4>
              <small>Always here to help</small>
            </div>
          </div>
        </div>
        <div class="chat-body" id="chatBody">
          <div class="typing-indicator" id="typingIndicator">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
          </div>
        </div>
        <div class="d-flex align-items-center mb-3">
          <button
            id="voiceIcon"
            class="btn btn-secondary"
            onclick="startHound()"
          >
            <img src="<%= '/imgs/mic.png' %>" alt="Microphone" height="40" />
          </button>
          <div id="stopButtonWrapper">
            <button
              id="stopButton"
              type="button"
              class="btn btn-danger"
              style="width: 70px"
            >
              Stop
            </button>
          </div>
          <div class="card" style="width: 100%">
            <div class="card-body" id="textbox">
              Click on the microphone to start.
            </div>
          </div>
        </div>
      </div>
    </div>

    <div style="display: none">
      <audio id="mp3Player" controls></audio>
    </div>
    <script src="<%= '/js/houndify.js' %>"></script>
    <script>
      const conversation = [];
      const textbox = document.getElementById("textbox");
      const voiceButton = document.getElementById("voiceIcon");
      const recorder = new Houndify.AudioRecorder();
      let voiceRequest = null;
      let conversationState = null;
      let clientId;
      let modelName;
      const audioPlayer = document.getElementById("mp3Player");
      const stopButton = document.getElementById("stopButtonWrapper");
      let previousContext = [];

      recorder.on("start", () => {
        voiceRequest = initVoiceRequest(recorder.sampleRate);
      });

      recorder.on("data", (data) => {
        voiceRequest.write(data);
      });

      recorder.on("end", () => {
        voiceRequest.end();
      });

      recorder.on("error", (err) => {
        voiceRequest.abort();
      });

      function startHound() {
        textbox.innerHTML = "";
        if (recorder && recorder.isRecording()) {
          recorder.stop();
          return;
        }
        recorder.start();
      }

      function initVoiceRequest(sampleRate) {
        const voiceRequest = new Houndify.VoiceRequest({
          clientId: "<%= clientId %>",
          authURL: "/houndifyAuth",
          requestInfo: {
            UserID: "msloan@soundhound.com",
            Latitude: 37.388309,
            Longitude: -121.973968,
            DeviceInfo: {
              env: "dev",
              DeviceName: "",
              DeviceYear: "",
              DeviceModel: "<%= modelName %>",
            },
            Polaris: {
              Model: "16k",
              PolarisOnly: true,
              EnglishMinProb: 0.2,
              RespLangMinProb: 0.8,
            },
            ResponseAudioVoice: "Emma Multilingual",
            ResponseAudioShortOrLong: "Short",
            ReturnResponseAudioAsURL: true,
          },
          conversationState: conversationState,
          sampleRate: sampleRate,
          enableVAD: true,
          onTranscriptionUpdate: (transcript) => {
            textbox.innerText = transcript.PartialTranscript;
            if (transcript.SafeToStopAudio == true) {
              handleUserMessage(transcript.PartialTranscript);
            }
          },

          onResponse: (response, info) => {
            recorder.stop();
            hideTypingIndicator();
            spokenResponse = response.AllResults[0].SpokenResponse;
            addMessage(spokenResponse, "system");
            conversationState = response.AllResults[0].ConversationState;
            playAudio(response.AllResults[0].ResponseAudioURL);
            // cmsIntegration(spokenResponse);
            cmsIntegration(response);
          },

          onError: (err, info) => {
            console.log(err);
          },
        });
        return voiceRequest;
      }

      function createMessageBubble(content, sender) {
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message", sender);

        const avatarDiv = document.createElement("div");
        avatarDiv.classList.add("avatar");

        if (sender === "user") {
          avatarDiv.textContent = "U";
        } else {
          avatarDiv.textContent = "S";
        }

        const contentDiv = document.createElement("div");
        contentDiv.classList.add("message-content");

        // Convert line breaks to <br> tags
        const formattedContent = content.replace(/\n/g, "<br>");
        contentDiv.innerHTML = formattedContent;

        if (sender === "user") {
          messageDiv.appendChild(avatarDiv);
          messageDiv.appendChild(contentDiv);
        } else {
          messageDiv.appendChild(contentDiv);
          messageDiv.appendChild(avatarDiv);
        }

        return messageDiv;
      }

      function showTypingIndicator() {
        const indicator = document.getElementById("typingIndicator");
        indicator.classList.add("visible");
      }

      function hideTypingIndicator() {
        const indicator = document.getElementById("typingIndicator");
        indicator.classList.remove("visible");
      }

      function addMessage(content, sender) {
        if (sender === "user") {
          conversation.push({ sender: "user", text: content });
        } else {
          conversation.push({ sender: "system", text: content });
        }

        const chatBody = document.getElementById("chatBody");
        const messageEl = createMessageBubble(content, sender);

        chatBody.insertBefore(
          messageEl,
          document.getElementById("typingIndicator")
        );
        chatBody.scrollTop = chatBody.scrollHeight;
      }

      // Function to handle user message submission and API call
      async function handleUserMessage(message) {
        textbox.innerHTML =
          "Click the microphone icon again to ask another question...";

        // Always put the first question in conversation array *as soon as the SafeToStopAudio flag is true*
        if (conversation.length === 0) {
          addMessage(message, "user");
        }
        // In case partial transcript changes AFTER SafeToStopAudio, don't add another message.
        else if (
          conversation[conversation.length - 1].text !== message &&
          conversation[conversation.length - 1].sender !== "user"
        ) {
          addMessage(message, "user");
        }

        showTypingIndicator();
      }

      function playAudio(audioURL) {
        audioPlayer.src = audioURL;
        audioPlayer.play();
        showStopButton();
      }

      function showStopButton() {
        stopButton.style.display = "block";
      }

      function hideStopButton() {
        stopButton.style.display = "none";
      }

      stopButton.addEventListener("click", () => {
        audioPlayer.pause();
        audioPlayer.currentTime = 0; // Reset to beginning
        hideStopButton();
      });

      audioPlayer.addEventListener("ended", () => {
        hideStopButton();
      });

      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      // async function cmsIntegration(spokenResponse, postBody) {
      //   const actionType = "<%= actionType %>";
      //   const specialConfig = <%- JSON.stringify(specialConfig) %>;

      //   if (actionType === 'keywords') {
      //     const match = specialConfig.find(item =>
      //     spokenResponse.toLowerCase().includes(item.keyword.toLowerCase())
      //   );
      //     if (match) {
      //       fetch(match.urlOn);
      //       await sleep(10000);
      //       fetch(match.urlOff);
      //     }
      //   }
      //   else if (actionType === 'sendFullConversation') {
      //     try {
      //       const response = await fetch(specialConfig.url, {
      //         method: 'POST',
      //         headers: {
      //           'Content-Type': 'application/json'
      //         },
      //         body: JSON.stringify(postBody)
      //       });

      //       if (!response.ok) throw new Error('Network response was not ok');
      //       const data = await response.json();
      //       console.log('Server response:', data);
      //     } catch (error) {
      //       console.error('Error sending post request:', error);
      //     }
      //   }
      //   else {
      //     return "hello world";
      //   }

      // }

      async function cmsIntegration(response) {
        const actionType = "<%= actionType %>";
        const specialConfig = <%- JSON.stringify(specialConfig) %>;
        const spokenResponse = response.AllResults[0].SpokenResponse;
        const question = response.Disambiguation.ChoiceData[0].FixedTranscription;
        const dialog = response.AllResults[0].ConversationState.DialogHistory;
        dialog.forEach(element => {
          delete element.TimeStamp;
          delete element.Domains;
        });
        previousContext.push(dialog);

        if (actionType === 'keywords') {
          const match = specialConfig.find(item =>
          spokenResponse.toLowerCase().includes(item.keyword.toLowerCase())
        );
          if (match) {
            fetch(match.urlOn);
            await sleep(10000);
            fetch(match.urlOff);
          }
        }
        else if (actionType === 'sendFullConversation') {
          let body = specialConfig.body
          body.data.Query = question;
          body.data.Response = spokenResponse;
          body.data.previous_context = previousContext;
          try {
            const response = await fetch(specialConfig.url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(body)
            });
            if (!response.ok) throw new Error('Network response was not ok');
            const data = await response.json();
            console.log('Server response:', data);
          } catch (error) {
            console.error('Error sending post request:', error);
          }
        }
      }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
